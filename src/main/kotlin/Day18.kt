import org.clechasseur.adventofcode2019.Pt
import org.clechasseur.adventofcode2019.dij.Dijkstra
import org.clechasseur.adventofcode2019.dij.Graph
import kotlin.math.min

object Day18 {
    private val input = """
        #################################################################################
        #.....#...........#....s..#.....#.......#...#...#...#...#.......#...........#...#
        #.#.#.#####.#.#####.#####.#.#####.#####.#.#.#.#.#.###.#.#.#.###.#.#.#########.#.#
        #.#.#.......#.#.........#.#.......#...#.#.#...#...#...#...#...#.#.#...#.......#.#
        #.#.#########.#.#########.#.#######.###.#.#####.###.#########.###.###.#.#######.#
        #l#...#...#...#...#.......#...#.....#...#.#.#...#...#.......#...#.#...#.#.......#
        #.###.#.###.#####.#.#########.###.#.#.###.#.#.###.#######.#.###.#.#.#.#.#.#####.#
        #.#...#...Z.#.#...#...#...........#.#...#.#.#.#.#.......#.#...#...#.#.#.#.....#.#
        #.#.#####.###.#.#####.###########.#####.#.#.#.#.#######.#.#########.###.#####M###
        #.#.#...#.#...#.....#.......#.....#...#.#.#...........#.#.......#...#...#...#...#
        #E#.#.#.#.###.#####.#######.#######.#.#.#.#######.#####.#.###.#.#.###.###.#####.#
        #.#...#.#.....#.....#.....#...#.....#.#.#.....#...#.....#.#.#.#.#...#.#.......#.#
        #.#####.#######.#########.###.#.#####.#.#.###.#####.#####.#.#.#####.#.#######.#.#
        #.#...#.........#...........#.#...#.....#...#.......#...#...#.....#.#.......#.#.#
        #.###.###########.#.#######.#.###.#####.###.#####.###.#.#####.#.#.#.#######.#.#.#
        #...#.....#x....#.#.#.....#.#...#.....#.#.#.#...#.....#.#...#.#.#.#.....L.#...#.#
        ###.#.#.#.###.#.#.###.###.###.#.#####.#.#.#.#.#.#######.#.#.###.#.#####.#####.#.#
        #.#.#.#.#...#.#...#...#.#...#.#.#.....#.#...#.#..b....#...#.....#.#...#.......#.#
        #.#.###.###.#.###.#.###.###.###.#.#####.#.###C#######.#############.#.#########.#
        #.#...#o#...#.#.#.#.#.....#.....#.....#.#..f#.#.....#.........#.....#.#.....#...#
        #.###.#.###.#.#.#.#.#####.#######.###.#####.#.#####.#########B#.#####.#.###.#.#.#
        #...#.#...#...#.#.#.#...#.......#...#...#...#.....#.........#.#.#.......#...#.#.#
        #.#.#.###.#####.#.#.###.###.###.#######.#.#######.#####.###.###.#.#######.###.#.#
        #.#.#.....#.....#.#...#...#...#.........#.#...N.#c....#...#t..P.#...#...#.....#.#
        #.#########.#####.#.#####.###.#####.#####.#.#########H###.###########.#.#.#######
        #.........#..g....#.....#...#.#.....#...#.#...#.....#...#.#...........#.#.#.....#
        #.#####.###.###########.###.#.#######.#.#.###.#.#.#####.#.#.###########.###.###.#
        #...#.#...#...#...#.....#...#.#.......#.#.#...#.#.......#...#.......#.#.......#.#
        ###.#.###.###.###.#.#####.###.#.#######.#.#.#.#.#########.#####V###.#.#########.#
        #.#.#.#.....#.#...#.......#.#...#...#...#...#.#......y#.#.#.....#.#...#.I.....#.#
        #.#.#.#.#.###.#.###########.#.###.###.#.#####.#######.#.#.#.#####.###.#.#####.#.#
        #.....#.#.#...#.......#.......#...#...#.#.....#.#.....#.....#...#...#.#.#.......#
        #.#####.###.#######.#.#.#######.#.#.#####.#####.#.#############.#.#.#.#.#########
        #.#.#a..#...#.....#.#...#.......#.#.....#.#.....#...#..j#.......#.#.#.#.....#...#
        #.#.#.#.#.###.###.#.###########.#.#####.#.#.#######.#.#.###.#####.#.#.#####.#.#.#
        #.#.#.#.#.....#...#.#...........#...#...#.#.......#...#...#.....#.#..d....#...#.#
        #.#.#F#.#######.###.#.#########.#####.###.#.###.#########.#####.#.#############.#
        #.#.#.#.......#...#...#.........#...#...#.#...#.....#.#...#...#...#...#...#...U.#
        #.#.#.###########.###############.#.###.#.#######.#.#.#.###.#.#####.#.#.#.#.###.#
        #...#.............................#...............#...#.....#..q....#...#..r#...#
        #######################################.@.#######################################
        #.........#.....#.........#.........#.........#...........#.........#.........#.#
        #.#######.#.#.###.#####.#.#####.###.#.#.#.#####.###.#######.#####.###.###.###.#G#
        #.#.....#.#.#.......#...#.......#.#.#.#.#.#.....#.#.......#.#.....#.A...#...#...#
        #.#.###.#.###.#######.###########.#.###.#.#.#####.#######.#.#.#####.#######.###.#
        #.#...#.#...#.#...#...#.......#.....#...#.........#.....#.#.#.......#.....#...#.#
        #.#####.###.#.###.#.#.#.#####.#.#####.#.###########.###.#.#.#########.###.###.#.#
        #.....#.....#.....#.#.#.#.#...#.#...#.#.#...#.....#.#.#.#...#.....#...#.......#.#
        #.###.#.#########.#.###.#.#.###.#.#.#.#.#.#.#.###.#.#.#.#.###.###.#.#X#########.#
        #w..#.#.#.....#...#...#.#.#.#.....#n..#.#.#.#.#.#...#.#.#.#...#...#.#.#...#...#.#
        ###.#.#.###.###.#####.#.#.#.#############.#.#.#.#####.#.#.#.###.###.#.#.#.#.###.#
        #...#.#...#.#...#...#...#.#.#...........#.#...#.......#.#.#.#.#.#...#.#.#.#.....#
        #.###.###.#.#.###.#######.#.#.#########.#.###########.#.###.#.#.###.###.#.#######
        #.#...#.#.#.....#.........#...........#.#...#.........#.....#.#...#...#.#.......#
        #.#.###.#.#####.#####.#########.#######.#.#.#.###############.###.###.#.#######.#
        #.#.#.#..m#...#.......#...#...#.#...#...#.#.#...#.......#.......#...#...#.#.....#
        ###.#.#.###.#.#########.#.#.#.###.#.#.#.#.#.###.#.#####.#.###.#####.#.###.#.#####
        #...#...#...#...........#...#.....#...#.#.#...#.#.#.#...#...#.....#.#.#...#.....#
        #.###.###.#.###########################.#.###.#.#.#.#.###.#######.#.#.#.#O#####.#
        #p#.#.#...#.#...J.......#...#.......#...#...#.#.....#.....#.....#.#.#...#...#...#
        #.#.#K#.###.#.#####.###.#.#.#.#####.#.#####.#.#############.###.#.#.#######.#.#.#
        #.#.#.#...#.#.#.....#.#...#.#.#.....#...#.#.#...#.........#.#...#.#...#.#e..#.#.#
        #.#.#.#.#.#.#.###.###.#####.###.#######.#.#.###.#.#######.#.#####.###.#.#.###.#.#
        #.#.#.#.#.#.#...#...#h..#.#.Q.#.....#...#.#.#.#.#...#...#.#.#.#.....#.#.#...#.#.#
        #.#.#.###.#.###.#######.#.###.#.###.#.###.#.#.#.###.###.#.#.#.#.#.#.#.#.#.###.#.#
        #.#.#.#...#...#.....Y...#...#.#.#.#...#.#...#.#.........#.#.#...#.#.#.#...#...#.#
        #.#.#.#.###.#############.###.#.#.#####.#.###.###########.#.###.#.#.#.#####.###.#
        #.#.....#...#.........#.R...#.#.#.......#.#...#.....#.....#...#.#.#.#.......#...#
        #.#######.###.###.#####.###.#.#.#.#####.#.#.#.#.###.#.#.#####.#.#.#.#########.###
        #.....#...#...#.#.#...#.#.#...#.#...#.#.#.#.#.#.#.....#.#.....#.#.#.#......k#...#
        #.###.#####.###.#.#.#.#.#.#####.###.#.#.#.#.#.#.#.#######.#####.#.###.#.###.###.#
        #...#.#.....#...#...#.#.......#...#...#.#.#.#.#.#.#.#.....#...#.#.#...#.#.....#.#
        ###.#.#.#####D#.#####.#######.###.#.###.#.#.#.#.#.#.#.#####.###.#.#.###.#######.#
        #...#...#.....#i#.........#.#.#...#.#...#.#.#.#.#...#...#.......#...#.#.......#.#
        #.#######.#######.#######.#.#.#.#####.#.#.###.#.###.###.#.###########.#######.#.#
        #.#...#.........#...#.......#.#.......#.#.....#...#...#.#.#.......#.........#..z#
        #.#T#.###.#####.###.#########.#########.#####.###.#####.#.#####.#.###.#####.#####
        #...#...#.#...#.#...#...#...#.........#.#...#.#.#.#...#.#.....#.#...#.#.....#...#
        #######.###.#.#.#.###.#.#.#.#########.#.#.#.#.#.#.#.#.#.#####.#S###.###W###.#.#.#
        #...........#...#.....#...#..u........#.#.#....v#...#...#.......#.......#.....#.#
        #################################################################################
    """.trimIndent()

    fun part1(): Long {
        val labyrinth = input.lineSequence().mapIndexed {
            y, line -> line.mapIndexed { x, c -> Pt(x, y) to c }
        }.flatten().toMap()
        val interesting = labyrinth.filter { it.value == '@' || it.value.isLetter() }
        val graph = mutableMapOf<Pt, MutableMap<Pt, Long>>()
        interesting.map { (pos, c) ->
            val (dist, _) = Dijkstra.build(LabyrinthGraph(labyrinth, pos), pos)
            interesting.filter { it.value != c }.forEach { (subPos, _) ->
                val subDist = dist[subPos]
                if (subDist != null && subDist != Long.MAX_VALUE) {
                    graph.getOrPut(pos) { mutableMapOf() }[subPos] = subDist
                }
            }
        }
        return getKeys(interesting.filter { it.value == '@' }.keys.single(), labyrinth, graph)
    }

    private fun getKeys(from: Pt, labyrinth: Map<Pt, Char>, graph: Map<Pt, Map<Pt, Long>>,
                        soFar: Long = 0L, shortestSoFar: Long = Long.MAX_VALUE,
                        keys: List<Char> = emptyList()): Long {

        if (keys.size == 26) {
            println("$soFar steps: ${keys.joinToString(" -> ")}")
            return soFar
        }
        val keysSet = keys.toSet()
        val (dist, _) = Dijkstra.build(LabyrinthGraphGraph(labyrinth, graph, keysSet), from)
        val distToNewKeys = dist.filter {
            val key = labyrinth[it.key] ?: error("Unknown pos")
            it.value != Long.MAX_VALUE && key.isLowerCase() && !keysSet.contains(key)
        }
        var shortest = shortestSoFar
        for ((keyPos, keyDist) in distToNewKeys) {
            if (soFar + keyDist < shortest) {
                val key = labyrinth[keyPos] ?: error("Unknown pos")
                shortest = min(shortest, getKeys(keyPos, labyrinth, graph, soFar + keyDist, shortest, keys + key))
            }
        }
        return shortest
    }

    private val directions = listOf(Pt(1, 0), Pt(-1, 0), Pt(0, 1), Pt(0, -1))

    private class LabyrinthGraph(private val labyrinth: Map<Pt, Char>, private val start: Pt) : Graph<Pt> {
        private val passable = labyrinth.asSequence().filter {
            it.value == '@' || it.value == '.' || it.value.isLetter()
        }.map { it.key }.toList()

        override fun allPassable(): List<Pt> = passable

        override fun neighbours(node: Pt): List<Pt> = directions.map { it + node }.filter {
            val srcType = labyrinth[node] ?: error("Source node must be known")
            val destType = labyrinth[it]
            (!srcType.isUpperCase() || node == start) && destType != null && destType != '#'
        }

        override fun dist(a: Pt, b: Pt): Long = 1L
    }

    private class LabyrinthGraphGraph(private val labyrinth: Map<Pt, Char>,
                                      private val graph: Map<Pt, Map<Pt, Long>>,
                                      private val keys: Set<Char>) : Graph<Pt> {

        override fun allPassable(): List<Pt> = graph.keys.toList()

        override fun neighbours(node: Pt): List<Pt> {
            val n = mutableSetOf<Pt>()
            getNeighbours(node, n)
            return n.toList()
        }

        override fun dist(a: Pt, b: Pt): Long = graph[a]?.get(b) ?: error("Unknowable dist")

        private fun getNeighbours(node: Pt, n: MutableSet<Pt>) {
            if (!n.contains(node)) {
                graph[node]?.forEach { (neighbour, _) ->
                    n.add(neighbour)
                    val c = labyrinth[neighbour] ?: error("Unknown neighbour")
                    if (c.isLowerCase() || keys.contains(c.toLowerCase())) {
                        getNeighbours(neighbour, n)
                    }
                }
            }
        }
    }
}
