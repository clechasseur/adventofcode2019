import org.clechasseur.adventofcode2019.Pt
import org.clechasseur.adventofcode2019.dij.Dijkstra
import org.clechasseur.adventofcode2019.dij.Graph

object Day18 {
    private val input = """
        #################################################################################
        #.....#...........#....s..#.....#.......#...#...#...#...#.......#...........#...#
        #.#.#.#####.#.#####.#####.#.#####.#####.#.#.#.#.#.###.#.#.#.###.#.#.#########.#.#
        #.#.#.......#.#.........#.#.......#...#.#.#...#...#...#...#...#.#.#...#.......#.#
        #.#.#########.#.#########.#.#######.###.#.#####.###.#########.###.###.#.#######.#
        #l#...#...#...#...#.......#...#.....#...#.#.#...#...#.......#...#.#...#.#.......#
        #.###.#.###.#####.#.#########.###.#.#.###.#.#.###.#######.#.###.#.#.#.#.#.#####.#
        #.#...#...Z.#.#...#...#...........#.#...#.#.#.#.#.......#.#...#...#.#.#.#.....#.#
        #.#.#####.###.#.#####.###########.#####.#.#.#.#.#######.#.#########.###.#####M###
        #.#.#...#.#...#.....#.......#.....#...#.#.#...........#.#.......#...#...#...#...#
        #E#.#.#.#.###.#####.#######.#######.#.#.#.#######.#####.#.###.#.#.###.###.#####.#
        #.#...#.#.....#.....#.....#...#.....#.#.#.....#...#.....#.#.#.#.#...#.#.......#.#
        #.#####.#######.#########.###.#.#####.#.#.###.#####.#####.#.#.#####.#.#######.#.#
        #.#...#.........#...........#.#...#.....#...#.......#...#...#.....#.#.......#.#.#
        #.###.###########.#.#######.#.###.#####.###.#####.###.#.#####.#.#.#.#######.#.#.#
        #...#.....#x....#.#.#.....#.#...#.....#.#.#.#...#.....#.#...#.#.#.#.....L.#...#.#
        ###.#.#.#.###.#.#.###.###.###.#.#####.#.#.#.#.#.#######.#.#.###.#.#####.#####.#.#
        #.#.#.#.#...#.#...#...#.#...#.#.#.....#.#...#.#..b....#...#.....#.#...#.......#.#
        #.#.###.###.#.###.#.###.###.###.#.#####.#.###C#######.#############.#.#########.#
        #.#...#o#...#.#.#.#.#.....#.....#.....#.#..f#.#.....#.........#.....#.#.....#...#
        #.###.#.###.#.#.#.#.#####.#######.###.#####.#.#####.#########B#.#####.#.###.#.#.#
        #...#.#...#...#.#.#.#...#.......#...#...#...#.....#.........#.#.#.......#...#.#.#
        #.#.#.###.#####.#.#.###.###.###.#######.#.#######.#####.###.###.#.#######.###.#.#
        #.#.#.....#.....#.#...#...#...#.........#.#...N.#c....#...#t..P.#...#...#.....#.#
        #.#########.#####.#.#####.###.#####.#####.#.#########H###.###########.#.#.#######
        #.........#..g....#.....#...#.#.....#...#.#...#.....#...#.#...........#.#.#.....#
        #.#####.###.###########.###.#.#######.#.#.###.#.#.#####.#.#.###########.###.###.#
        #...#.#...#...#...#.....#...#.#.......#.#.#...#.#.......#...#.......#.#.......#.#
        ###.#.###.###.###.#.#####.###.#.#######.#.#.#.#.#########.#####V###.#.#########.#
        #.#.#.#.....#.#...#.......#.#...#...#...#...#.#......y#.#.#.....#.#...#.I.....#.#
        #.#.#.#.#.###.#.###########.#.###.###.#.#####.#######.#.#.#.#####.###.#.#####.#.#
        #.....#.#.#...#.......#.......#...#...#.#.....#.#.....#.....#...#...#.#.#.......#
        #.#####.###.#######.#.#.#######.#.#.#####.#####.#.#############.#.#.#.#.#########
        #.#.#a..#...#.....#.#...#.......#.#.....#.#.....#...#..j#.......#.#.#.#.....#...#
        #.#.#.#.#.###.###.#.###########.#.#####.#.#.#######.#.#.###.#####.#.#.#####.#.#.#
        #.#.#.#.#.....#...#.#...........#...#...#.#.......#...#...#.....#.#..d....#...#.#
        #.#.#F#.#######.###.#.#########.#####.###.#.###.#########.#####.#.#############.#
        #.#.#.#.......#...#...#.........#...#...#.#...#.....#.#...#...#...#...#...#...U.#
        #.#.#.###########.###############.#.###.#.#######.#.#.#.###.#.#####.#.#.#.#.###.#
        #...#.............................#...............#...#.....#..q....#...#..r#...#
        #######################################.@.#######################################
        #.........#.....#.........#.........#.........#...........#.........#.........#.#
        #.#######.#.#.###.#####.#.#####.###.#.#.#.#####.###.#######.#####.###.###.###.#G#
        #.#.....#.#.#.......#...#.......#.#.#.#.#.#.....#.#.......#.#.....#.A...#...#...#
        #.#.###.#.###.#######.###########.#.###.#.#.#####.#######.#.#.#####.#######.###.#
        #.#...#.#...#.#...#...#.......#.....#...#.........#.....#.#.#.......#.....#...#.#
        #.#####.###.#.###.#.#.#.#####.#.#####.#.###########.###.#.#.#########.###.###.#.#
        #.....#.....#.....#.#.#.#.#...#.#...#.#.#...#.....#.#.#.#...#.....#...#.......#.#
        #.###.#.#########.#.###.#.#.###.#.#.#.#.#.#.#.###.#.#.#.#.###.###.#.#X#########.#
        #w..#.#.#.....#...#...#.#.#.#.....#n..#.#.#.#.#.#...#.#.#.#...#...#.#.#...#...#.#
        ###.#.#.###.###.#####.#.#.#.#############.#.#.#.#####.#.#.#.###.###.#.#.#.#.###.#
        #...#.#...#.#...#...#...#.#.#...........#.#...#.......#.#.#.#.#.#...#.#.#.#.....#
        #.###.###.#.#.###.#######.#.#.#########.#.###########.#.###.#.#.###.###.#.#######
        #.#...#.#.#.....#.........#...........#.#...#.........#.....#.#...#...#.#.......#
        #.#.###.#.#####.#####.#########.#######.#.#.#.###############.###.###.#.#######.#
        #.#.#.#..m#...#.......#...#...#.#...#...#.#.#...#.......#.......#...#...#.#.....#
        ###.#.#.###.#.#########.#.#.#.###.#.#.#.#.#.###.#.#####.#.###.#####.#.###.#.#####
        #...#...#...#...........#...#.....#...#.#.#...#.#.#.#...#...#.....#.#.#...#.....#
        #.###.###.#.###########################.#.###.#.#.#.#.###.#######.#.#.#.#O#####.#
        #p#.#.#...#.#...J.......#...#.......#...#...#.#.....#.....#.....#.#.#...#...#...#
        #.#.#K#.###.#.#####.###.#.#.#.#####.#.#####.#.#############.###.#.#.#######.#.#.#
        #.#.#.#...#.#.#.....#.#...#.#.#.....#...#.#.#...#.........#.#...#.#...#.#e..#.#.#
        #.#.#.#.#.#.#.###.###.#####.###.#######.#.#.###.#.#######.#.#####.###.#.#.###.#.#
        #.#.#.#.#.#.#...#...#h..#.#.Q.#.....#...#.#.#.#.#...#...#.#.#.#.....#.#.#...#.#.#
        #.#.#.###.#.###.#######.#.###.#.###.#.###.#.#.#.###.###.#.#.#.#.#.#.#.#.#.###.#.#
        #.#.#.#...#...#.....Y...#...#.#.#.#...#.#...#.#.........#.#.#...#.#.#.#...#...#.#
        #.#.#.#.###.#############.###.#.#.#####.#.###.###########.#.###.#.#.#.#####.###.#
        #.#.....#...#.........#.R...#.#.#.......#.#...#.....#.....#...#.#.#.#.......#...#
        #.#######.###.###.#####.###.#.#.#.#####.#.#.#.#.###.#.#.#####.#.#.#.#########.###
        #.....#...#...#.#.#...#.#.#...#.#...#.#.#.#.#.#.#.....#.#.....#.#.#.#......k#...#
        #.###.#####.###.#.#.#.#.#.#####.###.#.#.#.#.#.#.#.#######.#####.#.###.#.###.###.#
        #...#.#.....#...#...#.#.......#...#...#.#.#.#.#.#.#.#.....#...#.#.#...#.#.....#.#
        ###.#.#.#####D#.#####.#######.###.#.###.#.#.#.#.#.#.#.#####.###.#.#.###.#######.#
        #...#...#.....#i#.........#.#.#...#.#...#.#.#.#.#...#...#.......#...#.#.......#.#
        #.#######.#######.#######.#.#.#.#####.#.#.###.#.###.###.#.###########.#######.#.#
        #.#...#.........#...#.......#.#.......#.#.....#...#...#.#.#.......#.........#..z#
        #.#T#.###.#####.###.#########.#########.#####.###.#####.#.#####.#.###.#####.#####
        #...#...#.#...#.#...#...#...#.........#.#...#.#.#.#...#.#.....#.#...#.#.....#...#
        #######.###.#.#.#.###.#.#.#.#########.#.#.#.#.#.#.#.#.#.#####.#S###.###W###.#.#.#
        #...........#...#.....#...#..u........#.#.#....v#...#...#.......#.......#.....#.#
        #################################################################################
    """.trimIndent()

    private val startingLabyrinth = input.lineSequence().mapIndexed {
        y, line -> line.mapIndexed { x, c -> Pt(x, y) to c }
    }.flatten().toMap()
    private val startPos = startingLabyrinth.filter { it.value == '@' }.keys.first()

    fun part1() = getKeys(from = startPos, labyrinth = startingLabyrinth)

    private fun getKeys(from: Pt, labyrinth: Map<Pt, Char>, soFar: Long = 0): Long {
        val (dist, _) = Dijkstra.build(LabyrinthGraph(labyrinth), from)
        return labyrinth.filter { it.value.isLowerCase() }.map { (keyPos, key) ->
            when (val distToKey = dist[keyPos]) {
                null, Long.MAX_VALUE -> Long.MAX_VALUE
                else -> {
                    val newLabyrinth = labyrinth.map { when (it.value) {
                        key, key.toUpperCase() -> it.key to '.'
                        else -> it.key to it.value
                    } }.toMap()
                    getKeys(keyPos, newLabyrinth, soFar + distToKey)
                }
            }
        }.min() ?: Long.MAX_VALUE
    }

    private class LabyrinthGraph(private val labyrinth: Map<Pt, Char>) : Graph<Pt> {
        companion object {
            private val directions = listOf(Pt(1, 0), Pt(-1, 0), Pt(0, 1), Pt(0, -1))
        }

        override fun allPassable(): List<Pt>
                = labyrinth.filter { it.value != '#' && !it.value.isUpperCase() }.keys.toList()

        override fun neighbours(node: Pt): List<Pt> = directions.map { it + node }.filter {
            val type = labyrinth[it]
            type != null && type != '#' && !type.isUpperCase()
        }

        override fun dist(a: Pt, b: Pt): Long = 1
    }
}
